#!/bin/bash
#
#  diary-f
#
#  A simple program to keep track of daily events.
#
#  Creates a directory, ".diary", in the users home directory.  Individual pages
#  are stored in ".diary/pages"
#
#  Use "diary usage" to see examples of the command set.
#
#  Initially written by Jamie Briggs <jamie.briggs@computalog.com>
#  and forked by Eugene Arshinov <earshinov@gmail.com> for personal use.
#
#  This is actually a fork of a fork.
#  I (Matthias Beyer <mail@beyermatthias.de>) will extend this script, rewrite
#  parts and add new features.
#

# Try the environement for DIARY_PATH, if there is nothing use $HOME/.diary
DIARYDIR=$(printenv DIARY_PATH)
if [ -z "$DIARYDIR" ]; then
    DIARYDIR="$HOME/.diary"
fi

PAGEDIR="$DIARYDIR/pages"

#
#  The following are can be overidden in the user's diaryrc file
#

#  Save the current xterm label
XTITLE=
if [ "$TERM" == "xterm" ]; then
   XPROPS=`xprop -id $WINDOWID 2>/dev/null`
   if [ ! -z "$XPROPS" ]; then
      XTITLE=`echo "$XPROPS" | grep WM_NAME | cut -d= -f2\
                                     | sed -e 's/"\(.*\)"/\1/g'`
   fi
fi

#  Respect the EDITOR environment variable, if it exists
if [ "$EDITOR" = "" ]; then
   EDITOR="/usr/bin/vim"
   EDIT_OPTIONS="-c :$ -c \"set textwidth=80 fen fdm=marker\""
fi

# Less configuration variables
LESS_BACKKEY=u
LESS_FWDKEY=i

# Allow user to overide options
. $DIARYDIR/diaryrc &>/dev/null

LESSKEY_FILE=$DIARYDIR/lesskey
LESSOPTS_FILE=$DIARYDIR/.less_srch

# ======================================================================
# Utility functions
# ======================================================================

#
# Set the label of the xterm instance
#
label_xterm() {
   [ ! -z "$XTITLE" ] && echo -n "]0;$1"
}

#
# Get timestamp of file under path
#
# Arguments:
#   1) Filepath
#
timestamp() {
  # Strip possible floating part (it is present at least in GNU coreutils 8.6)
  stat -c %Y "$1" | cut -f1 -d.
}

#
# Extract a portion of lines, beginning with line "$BEGIN"
# and ending with line "$END" (inclusive)
#
# Arguments:
#   1) variable "b" in program, lines starting with this...
#   2) variable "e" in program, lines ending with this...
#
# will be filtered:

#   echo abc hi there | filter_list abc re #-> abc hi there
#   echo abc hi there | filter_list abc XX #-> abc hi there
#   echo abc hi there | filter_list ccc XX #->
#
filter_list() {
   AWK_PROGRAM='
      BEGIN { m=0; }
      {
         if (!m && $0 >= b) m=1;
         if (m && e != "" && $0 > e) exit;
         if (m) print;
      }'
   awk -vb="$1" -ve="$2" "$AWK_PROGRAM"
}

# ======================================================================
# Date functions
# ======================================================================

#
# Returns date in the format of calendar file's filename
#
unified_date() {
   DATE=`date '+%Y/%m/%d/%H:%M:%S' --date="$1"` && echo $DATE || return 1
}

# if `strptime` utility is available, use it to recognize dates
# specified in user's locale format
user_date() {
  unified_date "$1" 2>/dev/null ||
  strptime '%x' '%Y/%m/%d/%H:%M:%S' <<< "$1" 2>/dev/null ||
  ( echo "Invalid date \"$1\"" >&2; return 1 )
}

#
# Returns the header date
#
# Arguments:
#   1) Use this time to display in the header time format
#
header() {
   date --date="$1" '+%A, %x'
}

# ======================================================================
# Entry - dealing with particular diary entries
# ======================================================================
# every public method should take $FILE as its first argument!

# Utility functions
# ----------------------------------------------------------------------

#
# Return the filepath of the entry
#
# Arguments:
#   1) Name of the entry file
#
_entry_filepath() {
   echo $PAGEDIR/$1.cal
}

#
# Ensure an entry exists
#
# Arguments:
#   1) File name for the entry to check
#
_entry_ensure_exists() {
   FILEPATH=`_entry_filepath $1`
   if [ -f $FILEPATH ]
   then
      echo 'existing'
      return
   fi

   DIR=`dirname $FILEPATH`
   mkdir -p $DIR

   echo "                         `header $1`" > $FILEPATH
   echo >> $FILEPATH

   echo 'new'
   return
}

#
# Change an entry
#
# Arguments:
#   1) File to change
#   2) Callback to call for file with arguments:
#       1) The file name
#       2) The file path
#       3) The status whether the file exists or not
#       4) All additional parameters to the _entry_change() function itself
#   *) Additional arguments to the callback function
#
_entry_change() {
   FILE=$1
   CALLBACK=$2
   shift 2

   STATUS=$(_entry_ensure_exists $FILE)

   FILEPATH=`_entry_filepath $FILE`
   eval $CALLBACK $FILE $FILEPATH $STATUS $(printf '%q' "$*")
}

# Viewing actions
# ----------------------------------------------------------------------

#
# Print an entry
#
# Arguments:
#   1) The file name of the entry
#
entry_cat() {
   FILEPATH=`_entry_filepath $1`
   [ -f $FILEPATH ] && cat $FILEPATH
   return $?
}

#
# Show an entry using `less`
#
# Arguments:
#   1) The file name of the entry
#
entry_view() {
   FILEPATH=`_entry_filepath $1`
   if [ -f $FILEPATH ]
   then
      label_xterm "Diary: view $1"
      less -c +g $FILEPATH
      label_xterm $XTITLE
      return 0
   fi
   return 1
}

# The "edit" action
# ----------------------------------------------------------------------

#
# Callback: Edit an entry
#
# Calls the $EDITOR to edit an entry.
# If the file wasn't edited and was newly created, the file gets removed and if
# it was created in a new directory, it gets removed, too.
#
# Arguments:
#   1) File name
#   2) File path
#   3) Status of the file
#
_entry_edit() {
   FILE=$1
   FILEPATH=$2
   STATUS=$3

   OLD_TIMESTAMP=$(timestamp $FILEPATH)
   label_xterm "Diary: edit $FILE"
   $EDITOR $EDIT_OPTIONS $FILEPATH
   label_xterm $XTITLE
   NEW_TIMESTAMP=$(timestamp $FILEPATH)

   if [ $STATUS = 'new' -a $NEW_TIMESTAMP -eq $OLD_TIMESTAMP ]
   then
      rm -f $FILEPATH

      # remove empty directories
      while true
      do
        FILEPATH=$(dirname $FILEPATH)
        [ $FILEPATH == $PAGEDIR ] && break
        rmdir $FILEPATH &>/dev/null || break
      done
   fi
}

#
# Edit an entry
#
# Use _entry_change with the _entry_edit callback to edit an entry
#
# Arguments:
#   1) File to change
#
entry_edit() {
   _entry_change $1 _entry_edit
}

# The "entry" action
# ----------------------------------------------------------------------

#
# Callback: Add an entry
#
# Ignores the File name and the status whether the file exists or not but uses
# the filepath of the file to write a date with the specified date entry and all
# other arguments.
#
# Arguments:
#   1) Filepath to write to
#
_entry_add_entry() {
   FILE=$2
   shift 3

   echo `date +%H:%M` $@ >> $FILE
}

#
# Add an entry
#
# Arguments:
#   1) The file to change/add
#   2) Additional arguments to _entry_add_entry, to write to the file which is
#   about to be created
#
entry_add_entry() {
   FILE=$1
   shift

   _entry_change $FILE _entry_add_entry $@
}

# ======================================================================
# Diary - user frontend for operating diary
# ======================================================================

# The `_diary_handle_interval` metafunction
# ----------------------------------------------------------------------

#
# Call a function for an interval of dates
#
# Holy shit!
#
# Arguments:
#   1) The function to call if there is only one date
#   2) The function to call on several dates (an interval)
#   3) Interval specification
#
_diary_handle_interval() {
   CALLBACK_FOR_SINGLE_DATE=$1
   CALLBACK_FOR_INTERVAL=$2
   shift 2

   # Split arguments on "-"
   FIRST="1"
   FIRST_DATE=""
   SECOND_DATE=""
   for arg; do
      if [ "$arg" == "-" -a -n "$FIRST" ]; then
         FIRST=""
         continue
      fi
      [ -n "$FIRST" ] && FIRST_DATE="$FIRST_DATE $arg" || SECOND_DATE="$SECOND_DATE $arg"
   done

   # If there is no "-", run the callback for single date and return
   FIRST_DATE=`user_date "$FIRST_DATE"` || return 1
   SECOND_DATE=`user_date "$SECOND_DATE"` || return 1
   if [ -n "$FIRST" ]; then
      eval $CALLBACK_FOR_SINGLE_DATE "$FIRST_DATE"
      return $?
   fi

   # Search for diary entries for dates withing the specified interval.
   # If there are any entries, run the second callback passing found file names
   builtin cd $PAGEDIR
   FILES="`
      find . -name '??.cal' | sort |
      sed -e 's:^\./::; s:\.cal$::' |
      filter_list $FIRST_DATE $SECOND_DATE |
      sed -e 's:$:.cal:'`"
   if [ -n "$FILES" ]; then
      eval $CALLBACK_FOR_INTERVAL $FIRST_DATE $SECOND_DATE $FILES
   fi
}

# The "cat" action
# ----------------------------------------------------------------------

#
# Callback: Print all files which are specified in the arguments
#
# Arguments:
#   1) <skipped>
#   2) <skipped>
#   *) File path to print
#
_diary_cat_interval() {
   shift 2
   for file; do
      cat "$file"
      echo
   done
}

#
# Cat entries from a certain interval
#
# Arguments:
#   *) Interval specification
#
diary_cat() {
   _diary_handle_interval entry_cat _diary_cat_interval "$@"
}

# The "view" action
# ----------------------------------------------------------------------

#
# Callback: View an interval of files
#
# Arguments:
#   1) The starting date
#   2) The ending date
#   *) File pathes
#
_diary_view_interval() {
   FIRST_DATE=$1
   SECOND_DATE=$2
   shift 2

   label_xterm "Diary: view $FIRST_DATE - $SECOND_DATE"
   less "$@"
   label_xterm $XTITLE
}

#
# View diary entries
#
# Use _diary_handle_interval with either viewing a single entry or a list of
# entries
#
# Arguments:
#   *) interval specification
#
diary_view() {
   _diary_handle_interval entry_view _diary_view_interval "$@"
}

# Editing actions
# ----------------------------------------------------------------------

#
# Edit today
#
# Arguments:
#   *) user_date() arguments
#
diary_edit() {
   DATE=`user_date "$*"` && entry_edit $DATE || return 1
}

#
# Edit an entry
#
# Arguments:
#   *) Arguments for entry_add_entry()
#
diary_add_entry() {
   entry_add_entry $(unified_date) $@ || return 1
}

# Searching
# ----------------------------------------------------------------------

#
# grep in the diary
#
# Arguments:
#   *) grep arguments
#
diary_grep() {
   builtin cd $PAGEDIR
   grep "$@" `find . -name '??.cal' | sed 's:^\./::' | sort`
}

#
# Search in the diary
#
# Override the less options to have "u" for older entries and "i" for newer
# entries, so we can switch through the entries using these keys.
#
# Arguments: Not figured out yet
#
diary_search() {
   if [ ! -f $LESSOPTS_FILE ] || [ $LESSOPTS_FILE -ot $0 ]; then
      {
         echo #command
         echo $LESS_BACKKEY    next-file
         echo $LESS_FWDKEY   prev-file
      } > $LESSKEY_FILE
      lesskey -o $LESSOPTS_FILE $LESSKEY_FILE
      rm $LESSKEY_FILE
   fi

   builtin cd $PAGEDIR
   label_xterm "Diary: search for $*"
   egrep --files-with-matches "$*" `find . -name '??.cal' | sort -r` |
      xargs less -P'"u" for older, "i" for newer' -k$LESSOPTS_FILE +"/$*
" ++g
   label_xterm $XTITLE
}

# ======================================================================
# Dealing with the old pages format
# ======================================================================

get_old_pages() {
   find $PAGEDIR -maxdepth 1 -name '????.??.??'
}

refile_old_pages() {
   echo -n "Reorganizing page structure ... "

   for fil in `get_old_pages`; do
      FPATH=`echo $fil |
             sed -e 's:\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\):\1\/\2\/\3:'`
      FPATH=$FPATH.cal
      MONTHDIR=`dirname $FPATH`

      mkdir -p $MONTHDIR
      mv $fil $FPATH
      echo -n .
   done
}

# ======================================================================
# Usage
# ======================================================================

usage() {
   cat << 'ENDUSAGE'
Examples:

  diary                       - open today's page for editing
  diary edit yesterday        - this is cheating! ... but you can edit
                                past entries if you really want to

  diary entry Hi World        - add a line to today's diary page

  diary cat                   - dump today's page to stdout
  diary cat last Monday       - dump last Monday's page to stdout
  diary cat last Mon - today  - dump entries from last Monday till today
  diary view <...>            - equivalent to `diary cat`, but opens
                                matching entries for viewing

  diary grep [Ff]ind          - grep pages for lines containing find or Find
  diary grep -F Find          - search for fixed string (options are passed
                                directly to grep)
  diary search "^Fixed"       - open pages for viewing that contain
                                lines that start with "Fixed"
ENDUSAGE
}

# ======================================================================
# The main function
# ======================================================================

#  Handle first time use
mkdir -p $PAGEDIR

#  Handle conversion from old format
[ -n "`get_old_pages`" ] && refile_old_pages

if [ $# = 0 ]; then
   diary_edit
elif [ $# = 1 ]; then
   PARAM=`echo $1 | tr A-Z a-z`
   case $PARAM in
      help | ? | usage | -h | --help )
         usage
      ;;
      cat )
         diary_cat
      ;;
      view )
         diary_view
      ;;
      edit )
         diary_edit
      ;;
      grep | search )
         echo "You need to specify search terms."
      ;;
      * )
         echo "Invalid parameter: $@" >&2
         exit 1
      ;;
   esac
else
   PARAM=`echo $1 | tr A-Z a-z`
   case $PARAM in
      entry )
         shift
         diary_add_entry $@
      ;;
      cat )
         shift
         diary_cat $@
      ;;
      view )
         shift
         diary_view $@
      ;;
      edit )
         shift
         diary_edit $@
      ;;
      grep )
         shift
         diary_grep "$@"
      ;;
      search )
         shift
         diary_search $@
      ;;
      * )
         echo "Invalid parameter: $@" >&2
         exit 1
      ;;
   esac
fi
