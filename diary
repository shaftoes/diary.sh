#!/bin/bash
#
#  diary-f
#
#  A simple program to keep track of daily events.
#
#  Creates a directory, ".diary", in the users home directory.  Individual pages
#  are stored in ".diary/pages"
#
#  Use "diary usage" to see examples of the command set.
#
#  Initially written by Jamie Briggs <jamie.briggs@computalog.com>
#  and forked by Eugene Arshinov <earshinov@gmail.com> for personal use.
#

DIARYDIR="$HOME/.diary"
PAGEDIR="$DIARYDIR/pages"

#
#  The following are can be overidden in the user's diaryrc file
#

#  Save the current xterm label
XTITLE=
if [ "$TERM" == "xterm" ]; then
   XPROPS=`xprop -id $WINDOWID 2>/dev/null`
   if [ ! -z "$XPROPS" ]; then
      XTITLE=`echo "$XPROPS" | grep WM_NAME | cut -d= -f2\
                                     | sed -e 's/"\(.*\)"/\1/g'`
   fi
fi

#  Respect the EDITOR environment variable, if it exists
if [ "$EDITOR" = "" ]; then
   EDITOR="/usr/bin/vim"
   EDIT_OPTIONS="-c :$ -c \"set textwidth=80 fen fdm=marker\""
fi

# Less configuration variables
BACKKEY=u
FWDKEY=i

# Allow user to overide options
. $DIARYDIR/diaryrc &>/dev/null

LESSKEY=$DIARYDIR/lesskey
LESSOPTS=$DIARYDIR/.less_srch

################################################################################
# functions
################################################################################

label_xterm ()
{
   if [ ! -z "$XTITLE" ]; then
      echo -n "]0;$1"
   fi
}

# `read' that does not split input string into array
dumb_read ()
{
   local OLD_IFS=$IFS
   IFS=''
   read "$@"
   local SUCCESS=$?
   IFS=$OLD_IFS
   return $SUCCESS
}

# `less' that does not actually run if nothing is to be displayed
smart_less ()
{
   if dumb_read line
   then
      (echo "$line"; cat) | less
   fi
}

timestamp()
{
  # Strip possible floating part (it is present at least in GNU coreutils 8.6)
  stat -c %Y "$1" | cut -f1 -d.
}

# --------------------

unified_date ()
{
   DATE=`date '+%Y/%m/%d' --date="$1"` && echo $DATE || return 1
}

user_date ()
{
  # Make it possible for a user to specify dates in his locale's format
  # if `strptime' helper utility is available
  unified_date "$1" 2>/dev/null ||
  strptime '%x' '%Y/%m/%d' <<< "$1" 2>/dev/null ||
  ( echo "Invalid date \"$1\"" >&2; return 1 )
}

header ()
{
   date --date="$1" '+%A, %x'
}

# --------------------

_entry_filepath ()
{
   echo $PAGEDIR/$1.cal
}

_entry_ensure_exists ()
{
   FILEPATH=`_entry_filepath $1`
   if [ -f $FILEPATH ]
   then
      echo 'existing'
      return
   fi

   DIR=`dirname $FILEPATH`
   mkdir -p $DIR

   echo "                         `header $1`" > $FILEPATH
   echo >> $FILEPATH

   echo 'new'
   return
}

_entry_change ()
{
   FILE=$1
   CALLBACK=$2
   shift 2

   STATUS=$(_entry_ensure_exists $FILE)

   FILEPATH=`_entry_filepath $FILE`
   eval $CALLBACK $FILE $FILEPATH $STATUS $(printf '%q' "$*")
}

entry_cat ()
{
   FILEPATH=`_entry_filepath $1`
   [ -f $FILEPATH ] && cat $FILEPATH
   return $?
}

entry_view ()
{
   FILEPATH=`_entry_filepath $1`
   if [ -f $FILEPATH ]
   then
      label_xterm "Diary: view $1"
      less -c +g $FILEPATH
      label_xterm $XTITLE
      return 0
   fi
   return 1
}

_entry_add_entry ()
{
   FILE=$2
   shift 3

   echo `date +%H:%M` $@ >> $FILE
}

entry_add_entry ()
{
   FILE=$1
   shift

   _entry_change $FILE _entry_add_entry $@
}

_entry_edit ()
{
   FILE=$1
   FILEPATH=$2
   STATUS=$3

   OLD_TIMESTAMP=$(timestamp $FILEPATH)
   label_xterm "Diary: edit $FILE"
   $EDITOR $EDIT_OPTIONS $FILEPATH
   label_xterm $XTITLE
   NEW_TIMESTAMP=$(timestamp $FILEPATH)

   if [ $STATUS = 'new' -a $NEW_TIMESTAMP -eq $OLD_TIMESTAMP ]
   then
      rm -f $FILEPATH

      # remove empty directories
      while true
      do
        FILEPATH=$(dirname $FILEPATH)
        [ $FILEPATH == $PAGEDIR ] && break
        rmdir $FILEPATH &>/dev/null || break
      done
   fi
}

entry_edit ()
{
   _entry_change $1 _entry_edit
}

################################################################################
# core functions
################################################################################

usage ()
{
   cat << ENDUSAGE
Examples:

  diary                  - open today's page for editing
  diary entry Hi World   - add a line to today's diary page

  diary cat              - dump today's page to stdout
  diary cat last monday  - dump last Monday's page to stdout

  diary view             - view today's page
  diary view 10/15/99    - open october 15, 1999 page for viewing
  diary view 2 days ago  - view the day before yesterday's page

  diary edit yesterday   - this is cheating! ... but you can edit
                           past entries if you really want to

  diary list 5           - output the last 5 non-blank pages
  diary october          - output all of the past October's non-blank pages
  diary october 2000     - output all of year 2000 October's non-blank pages

  diary review           - output entries for the last week
  diary review 3         - output entries for the last 3 calendar days

  diary grep [Ff]ind     - grep pages for lines containing find or Find
  diary grep -F Find     - search for fixed string (options are passed
                           directly to grep)
  diary search "^Fixed"  - open pages for viewing that contain
                           lines that start with "Fixed"
ENDUSAGE
}

# --------------------

get_old_pages ()
{
   find $PAGEDIR -maxdepth 1 -name '????.??.??'
}

refile_old_pages ()
{
   echo -n "Reorganizing page structure ... "

   for fil in `get_old_pages`; do
      FPATH=`echo $fil |
             sed -e 's:\([0-9]\+\)\.\([0-9]\+\)\.\([0-9]\+\):\1\/\2\/\3:'`
      FPATH=$FPATH.cal
      MONTHDIR=`dirname $FPATH`

      mkdir -p $MONTHDIR
      mv $fil $FPATH
      echo -n .
   done
}

# --------------------

cat_page ()
{
   DATE=`user_date "$*"` && entry_cat $DATE || return 1
}

view_page ()
{
   DATE=`user_date "$*"` && entry_view $DATE || return 1
}

edit_diary ()
{
   DATE=`user_date "$*"` && entry_edit $DATE || return 1
}

add_entry ()
{
   entry_add_entry $(unified_date) $@ || return 1
}

# --------------------

review_diary ()
{
   DAY=7
   if [ -n "$1" ]; then
      DAY=$1
      if [ $1 -le 0 ]; then
         echo "Invalid number of days: $1"
         return 1
      fi
   fi

   label_xterm "Diary: review $DAY day(s)"
   ( while [ $DAY -gt 0 ]; do
        let DAY=DAY-1
        entry_cat $(unified_date "$DAY days ago") && echo
     done ) | smart_less
   label_xterm $XTITLE
}

list_diary ()
{
   PAGES=7
   if [ -n "$1" ]; then
      PAGES=$1
      if [ $PAGES -le 0 ]; then
         echo "Invalid number of pages: $1"
         return 1
      fi
   fi

   echo
   builtin cd $PAGEDIR
   for fil in `find . -name '??.cal' | sort | tail -$PAGES`; do
      DATE=`echo $fil | sed -e 's:\.cal::; s:^\./::'`
      entry_review $DATE
   done
}

list_month ()
{
   MONTH=`date --date="$1 1" +%m`

   if [ -n "$2" ]; then
      YEAR=$2
   else
      YEAR=`date +%Y`
      THIS_MONTH=`date +%m`
      if [ $MONTH -gt $THIS_MONTH ]; then
         let YEAR=YEAR-1
      fi
   fi

   echo
   builtin cd $PAGEDIR
   for fil in `ls $YEAR/$MONTH/??.cal | sort`; do
      DATE=`echo $fil | sed -e 's:\.cal::'`
      entry_review $DATE
   done
}

# --------------------

grep_diary ()
{
   builtin cd $PAGEDIR
   grep "$@" `find . -name '??.cal' | sed 's:^\./::' | sort`
}

search_diary ()
{
   if [ ! -f $LESSOPTS ] || [ $LESSOPTS -ot $0 ]; then
      {
         echo #command
         echo $BACKKEY    next-file
         echo $FWDKEY   prev-file
      } > $LESSKEY
      lesskey -o $LESSOPTS $LESSKEY
      rm $LESSKEY
   fi

   builtin cd $PAGEDIR
   label_xterm "Diary: search for $*"
   egrep --files-with-matches "$*" `find . -name '??.cal' | sort -r` |
      xargs less -P'"u" for older, "i" for newer' -k$LESSOPTS +"/$*
" ++g
   label_xterm $XTITLE
}

################################################################################
# main
################################################################################

#  Handle first time use
mkdir -p $PAGEDIR

#  Handle conversion from old format
[ -n "`get_old_pages`" ] && refile_old_pages

if [ $# = 0 ]; then
   edit_diary
elif [ $# = 1 ]; then
   PARAM=`echo $1 | tr A-Z a-z`
   case $PARAM in
      help | ? | usage | -h | --help )
         usage
      ;;
      cat )
         cat_page
      ;;
      view )
         view_page
      ;;
      edit )
         edit_diary
      ;;
      list )
         list_diary
      ;;
      review )
         review_diary
      ;;
      grep | search )
         echo "You need to specify search terms."
      ;;
      january | february | march | april | \
      may | june | july | august | \
      september | october | november | december )
         list_month $PARAM
      ;;
      * )
         echo "Invalid parameter: $@" >&2
         exit 1
      ;;
   esac
else
   PARAM=`echo $1 | tr A-Z a-z`
   case $PARAM in
      entry )
         shift
         add_entry $@
      ;;
      cat )
         shift
         cat_page $@
      ;;
      view )
         shift
         view_page $@
      ;;
      edit )
         shift
         edit_diary $@
      ;;
      list )
         shift
         list_diary $@
      ;;
      review )
         shift
         review_diary $@
      ;;
      grep )
         shift
         grep_diary "$@"
      ;;
      search )
         shift
         search_diary $@
      ;;
      january | february | march | april | \
      may | june | july | august | \
      september | october | november | december )
         list_month $PARAM $2
      ;;
      * )
         echo "Invalid parameter: $@" >&2
         exit 1
      ;;
   esac
fi
